{
  "fileName": "context_manager.py",
  "filePath": "harness/context_manager.py",
  "url": "/blob/master/harness/context_manager.py",
  "summary": "```mermaid\nflowchart TB\n    subgraph swe_bench\n    direction TB\n    start([Start]) --> init_logging([Initialize Logging])\n    init_logging --> exec_wrapper([ExecWrapper Class])\n    exec_wrapper --> testbed_context_manager([TestbedContextManager Class])\n    testbed_context_manager --> setup_testbed([Set Up Testbed])\n    setup_testbed --> create_conda_env([Create Conda Environments])\n    create_conda_env --> clone_repo([Clone Repositories])\n    clone_repo --> install_dependencies([Install Dependencies])\n    install_dependencies --> task_env_context_manager([TaskEnvContextManager Class])\n    task_env_context_manager --> enter_task_env([Enter Task Environment])\n    enter_task_env --> reset_task_env([Reset Task Environment])\n    reset_task_env --> run_install_task([Run Installation Task])\n    run_install_task --> apply_patch([Apply Patch])\n    apply_patch --> run_tests_task([Run Tests Task])\n    run_tests_task --> exit_task_env([Exit Task Environment])\n    exit_task_env --> end([End])\n    end\n    end\n```\nThis flowchart represents the sequence of operations performed by the code in the `swe-bench` project. It starts with initializing logging, followed by the execution of the `ExecWrapper` class for running subprocess commands with specific arguments. The `TestbedContextManager` class sets up the testbed, including creating Conda environments, cloning repositories, and installing dependencies. The `TaskEnvContextManager` class manages the execution context for individual task instances, including entering and exiting the task environment, resetting the environment, running installation tasks, applying patches, and running test tasks.",
  "questions": "",
  "checksum": "21febd3e23710a9e08e8aa60e4027a87"
}